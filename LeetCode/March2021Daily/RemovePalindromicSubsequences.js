// Given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic subsequence from s.

// Return the minimum number of steps to make the given string empty.

// A string is a subsequence of a given string, if it is generated by deleting some characters of a given string without changing its order.

// A string is called palindrome if is one that reads the same backward as well as forward.

// Example 1:

// Input: s = "ababa"
// Output: 1
// Explanation: String is already palindrome
// Example 2:

// Input: s = "abb"
// Output: 2
// Explanation: "abb" -> "bb" -> "".
// Remove palindromic subsequence "a" then "bb".
// Example 3:

// Input: s = "baabb"
// Output: 2
// Explanation: "baabb" -> "b" -> "".
// Remove palindromic subsequence "baab" then "b".
// Example 4:

// Input: s = ""
// Output: 0

/**
 * BAD WORDING, BAD EXAMPLES
 */

var removePalindromeSub = function (s) {
  //a subsequence is a new string formed by letters taken from ANY SPOT in the string, so long as they are in sequence
  //so you can take out EVERY 'a' and EVERY 'b' no matter where they are, and they will be two palindromes
  //therefore, the max ever answer is 2 if the entire string is NOT already a palindrome, as you would remove all the 'a's in one swoop, then the 'b's
  //examples do not show this, and question is poorly written
  if (!s.length) return 0;
  for (let i = 0; i < s.length / 2; i++) {
    if (s[i] !== s[s.length - i - 1]) {
      return 2;
    }
  }
  return 1;
};
